#include <iostream>
using namespace std;
#define INF 100000000
#define maxweight INF
#define defaut 30
class graphmat{
public:
    int vertex_num=defaut;
    int edge_num;
    int maxvertex=defaut;
    graphmat(int sz);
    ~graphmat()
    {
        delete []vertexlist;
        delete []edge;
    }
    int getvalue(int i)
    {
        if(i>=0 && i<vertex_num)
            return vertexlist[i];
        else
            return -1;
    }
    int getweight(int v1,int v2)
    {
        if(v1!=-1&&v2!=-1)
            return edge[v1][v2];
        else return 0;
    }
    int GetFirstNeighbor(int v);
    int GetNextNeighbor(int v,int w);
    bool InsertVertex(const char& vertex);
    bool InsertEdge(int v1,int v2,int cost);
    bool removeVertex(int v);
    bool removeEdge(int v1,int v2);
    void inputGraph();
    void outputGraph();
    int getVertexpos(char vertex)
    {
        int i;
        for(i=0;i<vertex_num;i++)
            if(vertexlist[i]==vertex)
                return i;
        return -1;
    }
    char* vertexlist;
    int** edge;
};
graphmat::graphmat(int sz)
{
    maxvertex=sz;
    vertex_num=0;
    edge_num=0;
    int i,j;
    vertexlist=new char[maxvertex];
    edge=new int *[maxvertex];
    for(i=0;i<maxvertex;i++)
        edge[i]=new int[maxvertex];
    for(i=0;i<maxvertex;i++)
        for(j=0;j<maxvertex;j++)
            if(i==j)
                edge[i][j]=0;
            else
                edge[i][j]=maxweight;
}

int graphmat::GetFirstNeighbor(int v)
{
    if(v!=-1)
    {
        for(int col=0;col<maxvertex;col++)
            if(edge[v][col]>0 && edge[v][col]<maxweight)
                return col;
    }
    return -1;
}

int graphmat::GetNextNeighbor(int v,int w)
{
    if(v!=-1 && w!=-1)
    {
        for(int col=w+1;col<maxvertex;col++)
            if(edge[v][col]>0 && edge[v][col]<maxweight)
                return col;
    }
    return -1;
}

bool graphmat::InsertVertex(const char& vertex)
{
    if(vertex_num==maxvertex) return false;
    vertexlist[vertex_num++]=vertex;
    return true;
}

bool graphmat::InsertEdge(int v1,int v2,int cost)
{
    if(v1>-1 && v1<vertex_num && v2>-1 && v2<vertex_num)
    {
        if(edge[v1][v2]==maxweight)
        {
            edge[v1][v2]=edge[v2][v1]=cost;
            edge_num++;
            return true;
        }
        else
        {
            cout<<"exist!"<<endl;
            return false;
        }
    }
    else return false;
}

bool graphmat::removeVertex(int v)
{
    if(v<0 || v>vertex_num)
    {cout<<"not exist"<<endl;return false;}
    if(vertex_num==1)
    {
        cout<<"only one vertex"<<endl;
        return false;
    }
    vertexlist[v]=NULL;
    for(int i=0;i<vertex_num;i++)
        if(edge[i][v]>0&&edge[i][v]<maxweight)
        {
            edge_num--;
            edge[i][v]=INF;
        }
    vertex_num--;
    for(int j=0;j<vertex_num;j++)
        if(edge[v][j]>0&&edge[v][j]<maxweight)
            edge[v][j]=INF;
    return true;
}

bool graphmat::removeEdge(int v1,int v2)
{
    if(v1>-1 && v1<vertex_num && v2>-1 && v2<vertex_num && edge[v1][v2]>0 && edge[v1][v2]<INF)
    {
        edge[v1][v2]=INF;
        edge_num--;
        return true;
    }
    else return false;
}

void graphmat::inputGraph()
{
    int i,m,n;
    char v1,v2;
    int w;
    int num1,num2;
    cout<<"输入节点个数n，边数m"<<endl;
    cin>>n>>m;
    cout<<"输入顶点符号"<<endl;
    for(i=0;i<n;i++)
    {
        cin>>v1;
        this->InsertVertex(v1);
    }
    cout<<"输入顶点v1，v2，权重w"<<endl;
    for(i=0;i<m;)
    {
        cin>>v1>>v2>>w;
        num1=this->getVertexpos(v1);
        num2=this->getVertexpos(v2);
        if(num1==-1||num2==-1)
            cout<<"error"<<" "<<num1<<" "<<num2;
        else
            if(this->InsertEdge(num1,num2,w))
                i++;
    }
}

int main()
{
    graphmat g(4);
    g.inputGraph();
}
