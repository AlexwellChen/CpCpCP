#include <iostream>
#include <stdlib.h>
#include <queue>
using namespace std;
class TNode{
public:
    int data;
    TNode *lch,*rch;
    TNode()
    {
        data=0;
        lch=NULL;
        rch=NULL;
    }
    TNode(int x)
    {
        data=x;
        lch=NULL;
        rch=NULL;
    }
};

class BT{
public:
    TNode root;
    queue<TNode*> Tree;

    void Leveorder(TNode *p)
    {
        queue<TNode*> q1,q2;
        p=&root;
        q1.push(p);
        TNode *t;
        while(!(q1.empty()&&q2.empty())){
            while(!q1.empty())
            {
                while(!q2.empty()) q2.pop();
                t=q1.front();
                if(t->data!=0)
                    cout<<t->data<<" ";
                q1.pop();
                if(t->data == 0)
                    continue;
                if(t->lch != NULL)
                    q2.push(t->lch);
                if(t->rch != NULL)
                    q2.push(t->rch);
            }
            cout<<endl;
            while(!q2.empty())
            {
                while(!q1.empty()) q1.pop();
                t=q2.front();
                if(t->data!=0)
                    cout<<t->data<<" ";
                q2.pop();
                if(t->data == 0)
                    continue;
                if(t->lch != NULL)
                    q1.push(t->lch);
                if(t->rch != NULL)
                    q1.push(t->rch);
            }
            cout<<endl;
        }

    }

    void CreatTree(TNode *p)
    {
        queue<TNode*> q;
        int x;
        q.push(p);
        TNode *l,*r,*t;
        while(cin>>x && x!=999){
            t=q.front();
            t->data=x;
            q.pop();
            if(t->data == 0)
                continue;
            if(t->lch == NULL)
            {
                l=new TNode;
                t->lch=l;
                q.push(l);
            }
            if(t->rch == NULL)
            {
                r=new TNode;
                t->rch=r;
                q.push(r);
            }
        }
    }
};

int main()
{
    BT t;
    t.CreatTree(&t.root);
    t.Leveorder(&t.root);
    return 0;
}
